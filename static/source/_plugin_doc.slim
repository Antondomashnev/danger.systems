ruby:
  name = external ? plugin["name"] : plugin["instance_name"]
  def method_return_span(meth)
    if meth["tags"]
      return_value = meth["tags"].select { |t| t["name"] == "return" && t["types"]}.first
      return "" if return_value == nil
      return "" if return_value["types"] == nil
      return "" unless return_value["types"].is_a? Array
      unless return_value.empty?
        return "" if return_value["types"].first == "void"
        return "<span class='subtle return'>" + return_value["types"].first  + "</span>"
      end
    end
    ""
  end

  def method_params_span(params)
    meth = params

    if meth["params"]

      params_names = meth["params"].compact.flat_map { |param| param.first }
      params_values = meth["tags"].select { |t| t["name"] == "param" }.first

      return "()" if params_values == nil
      return "()" if params_values["types"] == nil

      params_map_array = params_names.map.with_index do |name, index|
        { name => params_values["types"][index] }
      end

      return "" if params_map_array.empty?

      span ="("
      span += params_map_array.map do |map| 
        name = map.keys.first
        type = map[name]
        if type
          "<span class='subtle'>" + name + "</span><span class='subtle return'>" + type + "<span>"
        else
          "<span class='subtle'>" + name + "<span>"
        end
      end.join ", "
      return span + ")"
    end
    ""
  end

- unless external
  h2
    span == name

article.scope_code

  - if external
    h3 == name

  /  TODO: Name + version in metadata
  / h3 == plugin["gem"].gsub("danger-", "") + " <span>#{plugin["gem"]["version"]}</span>"
  == markdown_h(plugin["body_md"])

  h3 Reference
  - unless plugin["attributes"].empty?
    h4 Attributes
    - for attribute in plugin["attributes"]
      .fake_code
         == markdown_h(attribute.values.first["write"]["body_md"])
      code == attribute.keys.first + method_return_span(attribute.values.first["write"])

  - unless plugin["methods"].empty?
    h4 Methods
    - for method in plugin["methods"]
      .fake_code
         == markdown_h(method["body_md"])
      code == method["name"] + method_params_span(method)  + method_return_span(method)

article.scope_code
  h3 Examples
  - for example in plugin["example_code"]
    h4 == example["title"]
    = syntax_highlight example["text"]

  / TODO: Gem name
  / h3 How to Install
  / markdown:
  /   Include `gem "#{plugin["gem"]["name"]}"` in your projectâ€™s Gemfile. Then run `bundle`.

  /   Then inside your Dangerfile, you can access the plugin's API via `#{plugin["instance_name"]}`.
  
  - if external
    h3 Tags
    code == plugin["tags"].join(" ")

    - if plugin["see"].empty? == false
      h3 See in Action
      ul
        - for link in plugin["see"]
          li
            a href="https://github.com/#{link}" == link
.clearfix
